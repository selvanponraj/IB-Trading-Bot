from ib_insync import *
from collections import deque

# import pandas as pd
# from matplotlib import pyplot as plt
# from statsmodels.graphics.tsaplots import plot_acf
# from statsmodels.tsa.ar_model import AutoReg
# from statsmodels.tsa.arima.model import ARIMA
# from sklearn.metrics import mean_squared_error
# from math import sqrt
import pandas_ta as ta
# from arch import arch_model
# import numpy as np

util.startLoop()

contract_dict = {'Stock':Stock, 'Crypto':Crypto, 'Future':Future}

class Algo():
    def __init__(self, client, addr, port, client_id):
        self.client = client
        self.addr = addr
        self.port = port
        self.client_id = client_id
        
        self.client.connect(addr, port, client_id)
        
    def SetPaperBalances(self):
        self.USD_balance = 1000
        self.BTC_balance = 0
        
        print('USD balance: {}'.format(self.USD_balance))
        print('BTC balance: {}'.format(self.BTC_balance))
    
    def GetContract(self, contract_type, ticker, exchange, currency):
        return contract_dict[contract_type](ticker, exchange, currency)
    
    def GetHistoricalData(self, contract, duration='1 D', bar_size='1 hour', whatToShow='MIDPOINT'):
        bars = self.client.reqHistoricalData(contract=contract, endDateTime='', durationStr=duration,
                                    barSizeSetting=bar_size, whatToShow=whatToShow, useRTH=True)
        return bars
    
    def BuildEMA(self, slow_period, fast_period):
        """using deques instead of dataframes"""
        self.slow_ema = deque(maxlen=slow_period)
        self.fast_ema = deque(maxlen=fast_period)
        
        """need to employ scanner to pull in data"""
               
    def GetDMI(self, df):
        df_adx = ta.adx(high=df['high'], low=df['low'], close=df['close'])
        df['ADX'] = df_adx['ADX_14']
        df['DMN'] = df_adx['DMN_14']
        df['DMP'] = df_adx['DMP_14']
        df['DM_diff'] = df['DMP'] > df['DMN']
        return df
    
    def GetMovingAverages(self, df, low, high, plot=True):
        if len(df) < high:
            return
        
        df[str(low)+'_average'] = df.close.rolling(low).mean()
        df[str(high)+'_average'] = df.close.rolling(high).mean()
        df.dropna(inplace=True)
        df['MA_diff'] = df[str(high)+'_average'] > df[str(low)+'_average']
        
        # if plot:
        #     df['close'].plot(legend=True)
        #     df[str(low)+'_average'].plot(legend=True)
        #     df[str(high)+'_average'].plot(legend=True)
        
        return df
    
    
    def PlacePaperOrder(self, order_type, price=None, quantity=None, date=None):

        if order_type=='sell':
            print('TRADE @', date)
            print('{} @ {}'.format(order_type, price))
            self.BTC_balance -= quantity
            self.USD_balance += quantity * price
            

        elif order_type=='buy':
            print('TRADE @', date)
            print('{} @ {}'.format(order_type, price))
            self.BTC_balance += quantity
            self.USD_balance -= quantity * price

        else:
            return 


        print('USD balance: {}'.format(self.USD_balance))
        print('BTC balance: {}'.format(self.BTC_balance))
        account_balance = self.USD_balance + self.BTC_balance * price
        print('Account balance: {}\n'.format(account_balance))       

    def RunDMI(self, df, ADX_MIN=20):
        for count, row in enumerate(df.iterrows()):
            if count==0:
                sentiment = row[1]['DM_diff']
            else:
                if (row[1]['ADX'] >= ADX_MIN):
                    if row[1]['DM_diff'] == sentiment:
                        self.PlacePaperOrder('no change')
                    else:
                        if row[1]['DM_diff']:
                            self.PlacePaperOrder('buy',row[1]['close'],1, row[1]['date'])
                        else:
                            self.PlacePaperOrder('sell', row[1]['close'],1, row[1]['date'])
                    sentiment = row[1]['DM_diff']
                else: continue                                     
                        
    
    def RunStrategy(self, df):   
        for count, row in enumerate(df.iterrows()):
            if count==0:
                sentiment = row[1]['MA_diff']
            else:
                if row[1]['MA_diff'] == sentiment:
                    self.PlacePaperOrder('no change')
                else:
                    if row[1]['MA_diff']:
                        self.PlacePaperOrder('sell',row[1]['close'],1, row[1]['date'])
                    else:
                        self.PlacePaperOrder('buy', row[1]['close'],1, row[1]['date'])
                    sentiment = row[1]['MA_diff']

def Main(client_id):
    """need to change so when crossover happens, closes current position and then goes in opposite direction """
    ib = IB()
    algo = Algo(ib, '127.0.0.1', 7497, client_id=client_id)

    contract1 = Future('NQ', '20240621', 'CME')
    contract2 = Future('ES', '20240621', 'CME')

    contract3 = Forex('EURUSD')
    contract4= Crypto('ETH','PAXOS','USD')

    contract = contract3

    bars = algo.GetHistoricalData(contract, '2 D', '5 mins','MIDPOINT')
    
    df = util.df(bars)

    print(df)
    
    algo.SetPaperBalances()
    
    # df_MA =  algo.GetMovingAverages(df, 10, 30, True)
    df_DMI = algo.GetDMI(df)
    
    # algo.RunStrategy(df_MA)
    algo.RunDMI(df_DMI)
    
    print('USD balance: {}'.format(algo.USD_balance))
    print('BTC balance: {}'.format(algo.BTC_balance))

    account_value = algo.USD_balance + algo.BTC_balance * bars[-1].close
    print('Account value: {}'.format(account_value))

Main(101)